<?php
defined('BASEPATH') OR exit('No direct script access allowed');

require APPPATH . '/libraries/REST_Controller.php';
use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

// use namespace
use Restserver\Libraries\REST_Controller;

class User extends REST_Controller {
	public function __construct() {
        parent::__construct();
        header("Access-Control-Allow-Origin: *");
        
        $this->load->model('User_m');
        $this->load->model('Location_m');
        $this->load->model('Common');
        $this->load->model('Content_m');
        $this->load->library('Logging');
	}

	function email_exist_post(){
		$this->db->select('*')
				->from('users')
				->where('email_login', urldecode($this->post('email')));
		$query = $this->db->get();
                
		$this->response($query->result());
	}

	function login_data_post(){
                //mengambil input post, karena $this->input->post() tidak berfungsi
                $this->input->raw_input_stream;
                //$input_data = json_decode($this->input->raw_input_stream, true);
                $input_data = $this->post();
                
		$this->db->select('*');
		$this->db->from('users');
		$this->db->where("email_login ='".$input_data['email']."' AND password = md5('".$input_data['pass']."')");

		$query = $this->db->get();

		$this->response($query->result());
                //$this->response($this->db->last_query());
	}

	function add_post(){
		$this->lang->load($this->post('lang'), ($this->post('lang')=="en" ? 'english' : 'indonesia'));
		// 1. form validation
		$this->load->library('form_validation');

		$this->form_validation->set_rules('email', 'Email', 'required|valid_email');
		$this->form_validation->set_rules('fn', $this->lang->line('name_first'), 'required');
		$this->form_validation->set_rules('level', 'Role', 'required');
		// profile picture tunggu arahan selanjutnya
		// $this->form_validation->set_rules('photo_id', 'Profile Photo', 'required');
		if($this->post('source')=="form"){
			$this->form_validation->set_rules('password', $this->lang->line('password'), 'required');
			$this->form_validation->set_rules('passconf', $this->lang->line('password_retype'), 'required|matches[password]');
		}

		if ($this->form_validation->run() == FALSE)
		{
			$response['status'] = 'error';
			$validation_message = validation_errors();
			$validation_message = str_replace('<p>', '', $validation_message);
			$validation_message = str_replace('</p>', '', $validation_message);
			$response['message'] = $validation_message;
			$response['pos'] = 'form validation';
		}
		else
		{
			// 2. check exist user by email
			$check_exist_email = $this->User_m->check_user_email_exist($this->post('email'));
			// 2.1 if email exist
			if($check_exist_email<>false)
				$response = array(
					'status' => 'error',
					'message' => $this->lang->line('error_email_exist'),
					'pos' => 'check email'
					);
			// 2.2 if email not exist
			else{
				// 3. adding user 
				$check_exist_user = true;
				$verification_key = generate_random_string('letter', 13).generate_random_string('number', 10).generate_random_string('letter', 7).uniqid();
				$data = array(
					'email_login' => $this->post('email'),
					'password' => md5($this->post('password')),
					'first_name' => $this->post('fn'),
					'last_name' => $this->post('ln'),
					'user_level' => $this->post('level'),
					'register_source' => $this->post('source'),
					'verification_key' => $verification_key
					);
				$province_input = $this->post('province');
				$city_input = $this->post('city');
				// // 3.1 check if province and city is numberic. if it is, then get the id
				// if(!is_numeric($province_input)){
				// 	$province_info = $this->Location_m->get_province(array('province_name' => $province_input));
				// 	$province_id = $province_info->row()->province_id;
				// }
				// else
				// 	$province_id = $province_input;

				// if(!is_numeric($city_input)){
				// 	$city_info = $this->Location_m->get_city(array('city_name' => $city_input));
				// 	$city_id = $city_info->row()->city_id;
				// }
				// else
				// 	$city_id = $city_input;
				// // 3.2 get user identifier for province and city
				// $prov_uid = $this->Location_m->get_user_identifier('province', $province_id);
				// $city_uid = $this->Location_m->get_user_identifier('city', $city_id);
				// $location_uid = $prov_uid.$city_uid;

				$this->load->helper('myfunction_helper');
				// 3.3 looping check exist user ID with the new user ID generated by location_uid + random number
				while ($check_exist_user==true){
					$random_letter = generate_random_string('letter', 3);
					$random_number = generate_random_string('number', 3);
					// format menjadi 6 char
					// susunan: karakter dipasangkan dari setiap letter & number sesuai urutan
					// misal letter = ABC & number = 567 => A5B6C7
					$generated_id = '';
					for($i = 0; $i < 3; $i++)
						$generated_id .= substr($random_letter, $i, 1).substr($random_number, $i, 1);
					
					$new_user_id = $generated_id;
					if(!$this->User_m->check_user_id_exist($new_user_id))
						$check_exist_user=false;
				}
				$data['user_id'] = $new_user_id;

				$create = $this->Common->add_to_table('users', $data);
				// // create data in opened city course - start
				// $data = array(
				// 	'user_id' => $new_user_id,
				// 	'city_id' => $city_id,
				// 	'verified' => '1'
				// 	);
				
				// $add_city = $this->Common->add_to_table('teacher_open_course_cities', $data);
				// // create data in opened city course - end
				
				if($create->status){
					$response = array(
						'status' => 'OK',
						'user_id' => $new_user_id,
						'email' => $this->post('email'),
						'first_name' => $this->post('fn'),
						'last_name' => $this->post('ln'),
						'role' => $this->post('level')
						);
					
					// profile picture tunggu arahan selanjutnya
					// add to user info data
					// $info_data = array('user_id' => $new_user_id, 'photo_primary_id' => $this->post('photo_id'));
					// $create_user_info = $this->Common->add_to_table('user_info_data', $info_data);

					// get email template from database
			        $get_template = $this->Content_m->get_email_templates(array('id' => 'post-registration-'.$this->post('lang')));
			        $template = htmlspecialchars_decode($get_template->row()->content);
			        
			        // prepare data to replace 
			        $content = $template;
			        $content = str_replace('[FULL_NAME]', $this->post('fn').($this->post('ln')=="" ? "":$this->post('ln')), $content);
			        $content = str_replace('[FIRST_NAME]', $this->post('fn'), $content);
			        $content = str_replace('[LAST_NAME]', $this->post('ln'), $content);
			        $content = str_replace('[EMAIL]', $this->post('email'), $content);
			        $content = str_replace('[USER_ID]', $new_user_id, $content);
			        $get_email_cs = $this->Content_m->get_option_by_param('company_email_customer_service');
			        $content = str_replace('[EMAIL_CS]', $get_email_cs->parameter_value, $content);
			        $get_phone_office = $this->Content_m->get_option_by_param('company_phone');
			        $content = str_replace('[PHONE_OFFICE]', $get_phone_office->parameter_value, $content);
			        $get_address_office = $this->Content_m->get_option_by_param('company_address');
			        $content = str_replace('[ADDRESS_OFFICE]', $get_address_office->parameter_value, $content);
			        $content = str_replace('[VERIFICATION_LINK]', $verification_key, $content);

					// send email to customer
					$this->load->library('My_PHPMailer');
			        $mail = new PHPMailer();
			        $mail->IsSMTP(); // we are going to use SMTP
			        $mail->SMTPAuth   = true; // enabled SMTP authentication
			        $mail->SMTPSecure = "ssl";  // prefix for secure protocol to connect to the server
			        $mail->Host       = $this->config->item('smtp_host');      // setting GMail as our SMTP server
			        $mail->Port       = $this->config->item('smtp_port');                   // SMTP port to connect to GMail
			        $mail->Username   = $this->config->item('smtp_user');  // user email address
			        $mail->Password   = $this->config->item('smtp_pass');            // password in GMail
			        $mail->SetFrom('admin@tutordoors.com', 'Admin Tutordoors');  //Who is sending the email
			        $mail->Subject    = $this->lang->line('welcome_in_tutordoors');

			        $mail->Body      = $content;
			        $mail->AltBody    = "Plain text message";
			        $destino = $this->post('email'); // Who is addressed the email to
			        $mail->AddAddress($destino, $this->post('fn'));

			        if(!$mail->Send()) {
			        	$this->logging->insert_event_logging('send_email_new_member', '', 'false', $mail->ErrorInfo);
			        } else {
			            $this->logging->insert_event_logging('send_email_new_member', '', 'true', 'Message sent');
			        }

			        // create online test assignment if any AND if level is tutor
			     //    if($this->post('level')=="teacher"){
			     //    	$this->load->model('Otest_m');
			     //    	$this->load->library('notification');
				    //     $auto_assignment = $this->Otest_m->get_test_data(array('is_active'=>'1', 'assign_to_new_tutor'=>'1'));
				    //     if($auto_assignment<>false){
				    //     	foreach($auto_assignment->result() as $test){
				    //     		// get last ID
								// $get_last_id = $this->Otest_m->get_last_id();
								// $last_id = $get_last_id->last_id;
								// $new_id = intval($last_id) + 1;

								// $assignment_id = 'TA'.str_pad($new_id, 5, "0", STR_PAD_LEFT);

				    //     		$data = array(
				    //     			'assignment_id' => $assignment_id,
								// 	'test_id' => $test->test_id,
								// 	'teacher_id' => $tutor_id
								// 	);
								
								// $insert = $this->Otest_m->insert_new_assignment($data);

								// // give notification to tutor 
						  //       $notif = array(
						  //       	'category' => 'new_test_assignment',
						  //       	'title' => 'Online Test Assignment',
						  //       	'content' => $this->lang->line('notification_new_test_assignment_create').' ID Assignment = '.$assignment_id,
						  //       	'sender_id' => 'admin', // admin
						  //       	'receiver_id' => $new_user_id // tutor ID
						  //       	);
						  //       $this->notification->insert($notif);
				    //     	}
				    //     }
			     //    }
				}
				else{
					$response['status'] = 'error';
					$response['message'] = $create->output;
					$response['pos'] = 'create user';
				}
			}
		}

		$this->response($response);
	}

	function socmed_image_post(){
		$media = $this->post('media');
		if($media=="facebook"){
			$user_id = $this->post('userid');
			$image_file_info = "https://graph.facebook.com/" . $user_id . "/picture?type=large";
		}
		else if($media=="google")
			$image_file_info = $this->post('google_image_url');
		// preparing local
		$new_file_name = $media.'_image_'.uniqid().'.jpg';
		$file_path = $_SERVER['DOCUMENT_ROOT']."/dev20/assets/uploads/".$new_file_name;
		//Get the file
		$content = file_get_contents($image_file_info);
		//Store in the filesystem.
		$fp = fopen($file_path, "w");
		fwrite($fp, $content);
		fclose($fp);

		$file_info = pathinfo($file_path);

		$upload_data = array(
			'file_name' => $new_file_name,
			'file_type' => 'image/jpeg',
			'file_extension' => '.'.$file_info['extension'],
			'img_width' => '0',
			'img_height' => '0',
			'file_size' => '0',
			'is_image' => '1'
		);

		$add_media = $this->Common->add_to_table('media_files', $upload_data);
		if($add_media->status){
			$response = array(
				'status'=>'OK',
				'image_id' => $add_media->output,
				'image_file_name' => $new_file_name
				);
		}
		else
			$response = array('status'=>'error', 'message'=>$add_media->output);

		$this->response($response);
	}

	function photo_primary_get(){
		$user_id = $this->get('user_id');
		$get = $this->User_m->get_user_info_data($user_id);
		if($get<>false)
			$response = array('filename' => $get->file_name);
		else 
			$response = array('filename' => null);

		$this->response($response);
	}

	function submit_question_post(){
		$get = $this->User_m->get_user_info($this->post('user_id'));

		$data = array(
			'name' => $get->first_name." ".$get->last_name,
			'email' => $get->email_login,
			'category' => $this->post('category'),
			'phone' => $get->phone_1,
			'subject' => "Help from mobile application",
			'message' => $this->post('message')
			);
		$add = $this->Common->add_to_table('contact_form_messages', $data);
		if($add->status)
			$response = array('status' => "OK");
		else
			$response = array('status' => "error", 'message' => $add->output);

		$this->load->library('notification');
		// 5.1 to student
        $notif = array(
        	'category' => 'new_contact_message',
        	'title' => 'New message on contact form',
        	'content' => 'There is a message from '.$get->first_name." ".$get->last_name,
        	'receiver_id' => 'admin',
        	'sender_id' => 'system'
        	);
        $this->notification->insert($notif);

		$this->response($response);
	}

	function all_get(){
		$get_data = $this->User_m->get_user_data();
		// print_r($this->db->last_query());
		$response = array();
		if($get_data <> false)
			$response = $get_data->result();
		$this->response($response);
	}

	function autocomplete_get(){
		$suggestions = $this->User_m->search_user_autocomplete($this->get('q'));

		$response = array();
		if($suggestions->num_rows() > 0)
			foreach($suggestions->result() as $suggest){
				$response[] = array(
					'value' => ucwords($suggest->user_level).': ID '.$suggest->user_id.' | '.$suggest->first_name.' '.$suggest->last_name,
					'id' => $suggest->user_id
					);
			}

		$this->response($response);
	}

}